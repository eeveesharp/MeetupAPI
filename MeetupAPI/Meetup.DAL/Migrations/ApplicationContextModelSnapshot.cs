// <auto-generated />
using System;
using Meetup.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Meetup.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Meetup.DAL.Entities.EventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimeEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizerEntityId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("int");

                    b.Property<int>("SpeakerId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("OrganizerId");

                    b.HasAlternateKey("SpeakerId");

                    b.HasIndex("OrganizerEntityId");

                    b.HasIndex("SpeakerId1");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Meetup.DAL.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserEntity");
                });

            modelBuilder.Entity("Meetup.DAL.Entities.OrganizerEntity", b =>
                {
                    b.HasBaseType("Meetup.DAL.Entities.UserEntity");

                    b.HasDiscriminator().HasValue("OrganizerEntity");
                });

            modelBuilder.Entity("Meetup.DAL.Entities.SpeakerEntity", b =>
                {
                    b.HasBaseType("Meetup.DAL.Entities.UserEntity");

                    b.HasDiscriminator().HasValue("SpeakerEntity");
                });

            modelBuilder.Entity("Meetup.DAL.Entities.EventEntity", b =>
                {
                    b.HasOne("Meetup.DAL.Entities.OrganizerEntity", null)
                        .WithMany("Events")
                        .HasForeignKey("OrganizerEntityId");

                    b.HasOne("Meetup.DAL.Entities.OrganizerEntity", "Organizer")
                        .WithOne()
                        .HasForeignKey("Meetup.DAL.Entities.EventEntity", "OrganizerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Meetup.DAL.Entities.SpeakerEntity", "Speaker")
                        .WithMany("Events")
                        .HasForeignKey("SpeakerId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("Meetup.DAL.Entities.OrganizerEntity", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Meetup.DAL.Entities.SpeakerEntity", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
